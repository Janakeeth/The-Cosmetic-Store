/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package App;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author waksh
 */
public class CreateNewUserPage extends javax.swing.JFrame {

    /**
     * Creates new form CreateNewUserPage
     */
    public CreateNewUserPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MainMenu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernametb = new javax.swing.JTextField();
        passwordtb = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        usertypecb = new javax.swing.JComboBox<>();
        AddUserbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ManagerTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CashierTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        Clearbtn = new javax.swing.JButton();
        deleteManager = new javax.swing.JButton();
        deleteCashier = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Create new user");

        MainMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        MainMenu.setText("Menu");
        MainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Managers");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Password:");

        usernametb.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        usernametb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernametbActionPerformed(evt);
            }
        });

        passwordtb.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        passwordtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordtbActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("User Type:");

        usertypecb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manager", "Cashier" }));
        usertypecb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usertypecbActionPerformed(evt);
            }
        });

        AddUserbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AddUserbtn.setText("Add User");
        AddUserbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddUserbtnActionPerformed(evt);
            }
        });

        ManagerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password"
            }
        ));
        jScrollPane1.setViewportView(ManagerTable);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Username:");

        CashierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password"
            }
        ));
        jScrollPane2.setViewportView(CashierTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Cashiers");

        Clearbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Clearbtn.setText("Clear");
        Clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearbtnActionPerformed(evt);
            }
        });

        deleteManager.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteManager.setText("Delete");
        deleteManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteManagerActionPerformed(evt);
            }
        });

        deleteCashier.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteCashier.setText("Delete");
        deleteCashier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCashierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MainMenu))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddUserbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Clearbtn))
                            .addComponent(usertypecb, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(passwordtb)
                            .addComponent(usernametb)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteManager))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteCashier)))))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(MainMenu))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addComponent(deleteCashier, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usernametb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordtb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usertypecb, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AddUserbtn)
                                    .addComponent(Clearbtn)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteManager, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new ManagerPanel().setVisible(true);
    }//GEN-LAST:event_MainMenuActionPerformed

    private void usernametbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernametbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernametbActionPerformed

    private void passwordtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordtbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordtbActionPerformed

    private void usertypecbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usertypecbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usertypecbActionPerformed

    private void AddUserbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddUserbtnActionPerformed
        // TODO add your handling code here:
        String username = usernametb.getText();
        String password = passwordtb.getText();
        String usertype = usertypecb.getSelectedItem().toString();
        
        if (username.isEmpty() || password.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please fill all the fields",
                    "Try Again!",
                    JOptionPane.ERROR_MESSAGE);
        }
        else{
            if("Manager".equals(usertype)){
                Manager manager = new Manager();
                manager.setUsername(username);
                manager.setPassword(password);

                ArrayList<Manager> managers = new ArrayList<>();

                DefaultTableModel model = (DefaultTableModel) ManagerTable.getModel();
                model.addRow(new Object[]{manager.getUsername(), manager.getPassword()});

                try{
                    java.io.File file = new java.io.File("manager.bin");
                    if (file.exists()) {
                        FileInputStream fis = new FileInputStream(file);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        managers = (ArrayList<Manager>) ois.readObject();
                        ois.close();
                        fis.close();
                    }

                    managers.add(manager);

                    FileOutputStream fos = new FileOutputStream(file);
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(managers);
                    oos.close();
                    fos.close();
                }
                catch (IOException | ClassNotFoundException e) {
                    e.printStackTrace();
                }

                usernametb.setText("");
                passwordtb.setText("");
            }
            else if(usertype.equals("Cashier")){
                Cashier cashier = new Cashier();
                cashier.setUsername(username);
                cashier.setPassword(password);

                ArrayList<Cashier> cashiers = new ArrayList<>();

                DefaultTableModel model = (DefaultTableModel) CashierTable.getModel();
                model.addRow(new Object[]{cashier.getUsername(), cashier.getPassword()});

                try{
                    java.io.File file = new java.io.File("cashier.bin");
                    if (file.exists()) {
                        FileInputStream fis = new FileInputStream(file);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        cashiers = (ArrayList<Cashier>) ois.readObject();
                        ois.close();
                        fis.close();
                    }

                    cashiers.add(cashier);

                    FileOutputStream fos = new FileOutputStream(file);
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(cashiers);
                    oos.close();
                    fos.close();
                }
                catch (IOException | ClassNotFoundException e) {
                    e.printStackTrace();
                }

                usernametb.setText("");
                passwordtb.setText("");
            }
        }
    }//GEN-LAST:event_AddUserbtnActionPerformed

    private void ClearbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearbtnActionPerformed
        // TODO add your handling code here:
        usernametb.setText("");
        passwordtb.setText("");
    }//GEN-LAST:event_ClearbtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
        FileInputStream file = new FileInputStream("manager.bin");
        ObjectInputStream input = new ObjectInputStream(file);
        
        ArrayList<Manager>managers = (ArrayList<Manager>) input.readObject();

        input.close();
        file.close();

        DefaultTableModel model = (DefaultTableModel) ManagerTable.getModel();
        for (Manager manager : managers) {
            model.addRow(new Object[]{manager.getUsername(), manager.getPassword()});
        }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        
        try {
        FileInputStream file = new FileInputStream("cashier.bin");
        ObjectInputStream input = new ObjectInputStream(file);
        
        ArrayList<Cashier>cashiers = (ArrayList<Cashier>) input.readObject();

        input.close();
        file.close();

        DefaultTableModel model = (DefaultTableModel) CashierTable.getModel();
        for (Cashier cashier : cashiers) {
            model.addRow(new Object[]{cashier.getUsername(), cashier.getPassword()});
        }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void deleteManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteManagerActionPerformed
        // TODO add your handling code here:
        int row = ManagerTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected!. Please select one", "Select row", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) ManagerTable.getModel();
            try {
                FileInputStream fis = new FileInputStream("manager.bin");
                ObjectInputStream ois = new ObjectInputStream(fis);

                ArrayList<Manager> managers = (ArrayList<Manager>) ois.readObject();

                ois.close();
                fis.close();

                Manager managerToRemove = managers.get(row);
                managers.remove(managerToRemove);
                model.removeRow(row);

                FileOutputStream fos = new FileOutputStream("manager.bin");
                ObjectOutputStream oos = new ObjectOutputStream(fos);

                oos.writeObject(managers);

                oos.close();
                fos.close();

            } catch (IOException | ClassNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting manager: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteManagerActionPerformed

    private void deleteCashierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCashierActionPerformed
        // TODO add your handling code here:
        int row = CashierTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected!. Please select one", "Select row", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) CashierTable.getModel();
            try {
                FileInputStream fis = new FileInputStream("cashier.bin");
                ObjectInputStream ois = new ObjectInputStream(fis);

                ArrayList<Cashier> cashiers = (ArrayList<Cashier>) ois.readObject();

                ois.close();
                fis.close();

                Cashier cashierToRemove = cashiers.get(row);
                cashiers.remove(cashierToRemove);
                model.removeRow(row);

                FileOutputStream fos = new FileOutputStream("cashier.bin");
                ObjectOutputStream oos = new ObjectOutputStream(fos);

                oos.writeObject(cashiers);

                oos.close();
                fos.close();

            } catch (IOException | ClassNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting cashier: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteCashierActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateNewUserPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddUserbtn;
    private javax.swing.JTable CashierTable;
    private javax.swing.JButton Clearbtn;
    private javax.swing.JButton MainMenu;
    private javax.swing.JTable ManagerTable;
    private javax.swing.JButton deleteCashier;
    private javax.swing.JButton deleteManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField passwordtb;
    private javax.swing.JTextField usernametb;
    private javax.swing.JComboBox<String> usertypecb;
    // End of variables declaration//GEN-END:variables
}
